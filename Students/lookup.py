from Students.document import Read
from Class.document import ClassIdFilter
from Others import *
from Others.sort import LimitSort

EXIT = ['s-m', None]
F5 = ['s-s', None]

FIELDS = {
    0: ['M√£ h·ªçc sinh', '\t', 12],
    1: ['H·ªç ƒë·ªám', '\t', 20],
    2: ['T√™n', '\t', 12],
    3: ['Tu·ªïi', '\t', 4],
    4: ['Ng√†y sinh', '\t', 12],
    5: ['SƒêT', '  \t', 12],
    6: ['M√£ l·ªõp', '\t', 11]
}
SELECTED_FIELDS = [0, 1, 2, 4, 3, 5, 6]

def lookup(data: list):
    index = 1
    output = '\t' + header('\t'.join([data[0][f] for f in SELECTED_FIELDS]), 1)
    for doc in data[1:]:
        doc = list(map(lambda fi: ' '*(FIELDS[fi][2] - len(doc[fi])) + doc[fi], SELECTED_FIELDS))
        if (index%2): output += f'\n     \033[1m{index}\033[0m\t' + ('\t').join(doc) + '\033[0m'
        else: output += f'\n     \033[1;30;37m{index}\033[0m\t\033[30;37m{('\t').join(doc)}\033[0m'
        index += 1
    return output

def StudentsSort(data: list, limit: bool, ft: dict):
    dataHead = data[0]
    data = data[1:]
    fields = SELECTED_FIELDS
    ol = []
    for i in range(len(fields)):
        fi = fields[i]
        ol.append(option(str(i+1), FIELDS[fi][0]) + FIELDS[fi][1])
    ol.append(option('Enter‚Üµ', 'M·∫∑c ƒë·ªãnh', 46))
    ol.append(option('ctrl + c', 'Tho√°t', 43))
    for i in range(round(len(ol) / 5 + .4)):
        print('      ' + '\t'.join(ol[5*i:5*(i+1)]))
    sort = ''
    while True:
        note = 'C√∫ ph√°p: "<T√πy ch·ªçn> <Chi·ªÅu: +(TƒÉng) ho·∫∑c -(Gi·∫£m)>"'
        if limit: note += ' <Gi·ªõi h·∫°n: S·ªë>'
        tip(note, 1)
        sort = query1(f'c√∫ ph√°p s·∫Øp x·∫øp (M·∫∑c ƒë·ªãnh: \033[35m{'1 + 10' if limit else '1 +'}\033[0m)', 2)
        if not sort:
            sort = ['1', '+', '10'] if limit else ['1', '+']
            break
        sort = sort.split(' ')
        if ((len(sort) == 2 and not limit) or (len(sort) == 3 and limit)
            ) and ((0 < int(sort[0]) <= len(fields)) and sort[1].strip() in ['+', '-']):
            break
        else: print(clr(' ‚ùå L·ªçc kh√¥ng th√†nh c√¥ng: C√∫ ph√°p kh√¥ng h·ª£p l·ªá.\nH√£y ch·ªçn l·∫°i!', 'fail'))
    ft['sort'] = sort
    data = LimitSort(data, int(sort[2]) if limit else 0, False if sort[1] == '+' else True, lambda d: d[int(sort[0])-1])
    data = [dataHead] + data
    ft['histoty'].append('    ‚úîÔ∏è  S·∫Øp x·∫øp l·ªõp theo tr∆∞·ªùng: ' + FIELDS[fields[int(sort[0])-1]][0] )
    ft['histoty'][-1] += ', ' + ('TƒÉng d·∫ßn' if sort[1] == '+' else 'Gi·∫£m d·∫ßn')
    if limit: ft['histoty'][-1] += ' (Gi·ªõi h·∫°n ' + sort[2] + ')'
    else: ft['histoty'][-1] += ' (T·∫•t c·∫£)'
    return [data, ft]

def AlterColumn(data, n, ft):
    return [data, ft]

def LookupAction(data: list):
    title = bold('[1] Tra c·ª©u th√¥ng tin l·ªõp')
    DATA = data
    if not data:
        DATA = Read()

    data = DATA.copy()
    output0 = lookup(data)
    cls(title, '\n', output0)
    output1 = ''
    ft = { 'class': [], 'histoty': [' üìù L·ªãch s·ª≠ b·ªô l·ªçc:'] }
    # DATA.sort(key= lambda l: l[0])
    FUNCTION = {
        '1': [AlterColumn, (None, 'C·∫•u tr√∫c l·∫°i b·∫£ng')],
        '2': [ClassIdFilter, (6, 'L·ªçc theo m√£ l·ªõp')],
        '3': [StudentsSort, (False, 'S·∫Øp x·∫øp t·∫•t c·∫£')],
        '4': [StudentsSort, (True, 'S·∫Øp x·∫øp gi·ªõi h·∫°n')]
    }
    ol = [
        option('1', FUNCTION['1'][1][1]),
        option('2', FUNCTION['2'][1][1]) + '\t',
        option('3', FUNCTION['3'][1][1]),
        option('4', FUNCTION['4'][1][1]),
        option('5', 'Chuy·ªÉn sang T√¨m ki·∫øm')
    ]
    while True:
        if not output0:
            output0 = lookup(data)
            cls(title, '\n', output0)
        print('\n    ' + '\t'.join(ol[:3]))   
        print('    ' + '\t'.join(
            ol[3:] + [option('ctrl + c', 'X√≥a b·ªô l·ªçc' if len(ft['histoty']) > 1 else 'Tr·ªü v·ªÅ Menu', 43)]
        ))
        try:
            fn = query2('1 ch·ª©c nƒÉng', 1)
            if fn == '5': return F5
            elif fn in FUNCTION:
                if len(ft['histoty']) == 1: cls(title, '\n', output0)
                else: cls(title, '\n', '\n'.join(ft['histoty']), '\n', output1)
                print(bold(f'[1.{fn}] {FUNCTION[fn][1][1]}'))
                try:
                    data, ft = FUNCTION[fn][0](data, FUNCTION[fn][1][0], ft)
                    output1 = lookup(data)
                except KeyboardInterrupt: continue
                finally:
                    if len(ft['histoty']) == 1: cls(title, '\n', output0)
                    else: cls(title, '\n', '\n'.join(ft['histoty']), '\n\n', output1)
            else: print(clr(' \u2716  Ch·ªâ nh·∫≠p s·ªë ·ª©ng v·ªõi c√°c ch·ª©c nƒÉng tr√™n.\n    H√£y th·ª≠ l·∫°i!', 'fail'))
        except KeyboardInterrupt:
            if len(ft['histoty']) > 1:
                cls(title, '\n', output0)
                data = DATA.copy()
                ft = { 'class': [], 'histoty': [' üìù L·ªãch s·ª≠ b·ªô l·ªçc:'] }
                output1 = ''
                continue
            return EXIT
        except Exception as e:
            print(clr(' \u2716  L·ªçc kh√¥ng th√†nh c√¥ng: ' + str(e), 'fail'))