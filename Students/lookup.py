from Students.document import Read
from Others.style import cls, clr, option, bold, header
from Others.sort import LimitSort

MODE = {
    'exit': ['s-m', None],
    'f2':   ['s-a', None],
    'f3':   ['s-u', None],
    'f4':   ['s-r', None],
    'f5':   ['s-s', None]
}

def lookup(data: list):
    index = 1
    print('\t' + header(('\t').join(data[0]), 1))
    for doc in data[1:]:
        doc[1] = ' '*(21 - len(doc[1])) + doc[1]
        doc[2] = ' '*(13 - len(doc[2])) + doc[2]
        doc[3] = ' ' + doc[3]
        doc[4] = '  ' + doc[4]
        if (index%2): print(f'     \033[1m{index}\033[0m\t  ' + ('\t ').join(doc))
        else: print(f'     \033[1;30;37m{index}\033[0m\t  \033[30;37m{('\t ').join(doc)}\033[0m')
        index += 1

def StudentsSort(data: list, limit: bool, ft: dict):
    dataHead = data[0]
    data = data[1:]
    od = {
        '1': 'M√£ h·ªçc sinh',
        '2': 'H·ªç ƒë·ªám',
        '3': 'T√™n',
        '4': 'Tu·ªïi',
        '5': 'Ng√†y sinh',
        '6': 'S·ªë ƒëi·ªán tho·∫°i',
        '7': 'M√£ l·ªõp'
    }
    ol = list(map(lambda k: '\t' + option(k, od[k]), od)) + [option('Enter‚Üµ', 'M·∫∑c ƒë·ªãnh')]
    for i in range(round(len(od) / 3 + .4)):
        print('\t'.join(ol[3*i:3*(i+1)]))
    sort = ''
    while True:
        note = '[!] C√∫ ph√°p: "<T√πy ch·ªçn> <Chi·ªÅu: +(TƒÉng) ho·∫∑c -(Gi·∫£m)>"'
        if limit: note += ' <Gi·ªõi h·∫°n: S·ªë>'
        print(clr(note, 'note'))
        sort = input(f'[?] S·∫Øp x·∫øp l·ªõp theo tr∆∞·ªùng (M·∫∑c ƒë·ªãnh: \033[35m{'1 + 10' if limit else '1 +'}\033[0m): ')
        if not sort:
            sort = ['1', '+', '10'] if limit else ['1', '+']
            break
        sort = sort.split(' ')
        if ((len(sort) == 2 and not limit) or (len(sort) == 3 and limit)
            ) and (sort[0].strip() in od and sort[1].strip() in ['+', '-']):
            break
        else:
            print(clr(' ‚ùå L·ªçc kh√¥ng th√†nh c√¥ng: C√∫ ph√°p kh√¥ng h·ª£p l·ªá.\nH√£y ch·ªçn l·∫°i!', 'fail'))
    ft['sort'] = sort
    data = LimitSort(data, int(sort[2]) if limit else 0, int(sort[1]+'1'), lambda d: d[int(sort[0]) - 1])
    data = [dataHead] + data
    ft['histoty'].append(f'    ‚úîÔ∏è  S·∫Øp x·∫øp l·ªõp theo tr∆∞·ªùng: {od[sort[0]]}, {'TƒÉng d·∫ßn' if sort[1] == '+' else 'Gi·∫£m d·∫ßn'}')
    if limit: ft['histoty'][-1] += ', Gi·ªõi h·∫°n ' + sort[2]
    else: ft['histoty'][-1] += ', T·∫•t c·∫£'
    return [data, ft]


def LookupAction(data: list = None):
    title = bold('[1] Tra c·ª©u th√¥ng tin l·ªõp')
    data = Read()
    cdata = data.copy()
    ft = {'maLop': [], 'histoty': [' üìù L·ªãch s·ª≠ b·ªô l·ªçc:'], 'sort': ''}
    # data.sort(key= lambda l: l[0])
    FUNCTION = {
        '1': [None, (0, 'L·ªçc theo m√£ l·ªõp')],
        '2': [StudentsSort, (False, 'S·∫Øp x·∫øp t·∫•t c·∫£ theo tr∆∞·ªùng')],
        '3': [StudentsSort, (True, 'S·∫Øp x·∫øp gi·ªõi h·∫°n theo tr∆∞·ªùng')]
    }
    ol = [
        option('1', FUNCTION['1'][1][1]),
        option('2', FUNCTION['2'][1][1]),
        option('3', FUNCTION['3'][1][1])
    ]
    while True:
        cls(title + (('\n'.join(ft['histoty']) + '\n') if len(ft['histoty']) > 1 else ''))
        lookup(cdata)
        try:
            print('\n    ' + '   '.join(
                ol + [option('ctrl + c', 'X√≥a b·ªô l·ªçc' if len(ft['histoty']) > 1 else 'Tr·ªü v·ªÅ Menu', 43)]
            ))
            fn = input('[?] Ch·ªçn ch·ª©c nƒÉng: ')
            if fn in MODE: return MODE[fn]
            elif fn in FUNCTION:
                print(f'[1.{fn}] {FUNCTION[fn][1][1]}')
                cdata, ft = FUNCTION[fn][0](cdata, FUNCTION[fn][1][0], ft)
            else: print(clr(' ‚ùå Ch·ªâ nh·∫≠p s·ªë ·ª©ng v·ªõi c√°c ch·ª©c nƒÉng tr√™n.\n    H√£y th·ª≠ l·∫°i!', 'fail'))
        except KeyboardInterrupt:
            if len(ft['histoty']) > 1:
                cdata = data.copy()
                ft = {'maLop': [], 'histoty': [' üìù L·ªãch s·ª≠ b·ªô l·ªçc:'], 'sort': ''}
                continue
            return MODE['exit']